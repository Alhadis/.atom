@import (optional) "./tmp.less";

/* Force tab-width for elements outside editor windows */
*{ tab-size: 4; }


/* OpenType features */
atom-text-editor{
	font-variant-ligatures: contextual;

	// Bunched double/triple-slashes
	.syntax--comment.syntax--line.syntax--double-slash                > .syntax--punctuation.syntax--definition.syntax--comment,
	.syntax--comment.syntax--line.syntax--triple-slash                > .syntax--punctuation.syntax--definition.syntax--comment,
	.syntax--comment.syntax--line.syntax--scss                        > .syntax--punctuation.syntax--definition.syntax--comment,
	.syntax--comment.syntax--line.syntax--sass                        > .syntax--punctuation.syntax--definition.syntax--comment,
	.syntax--comment.syntax--block.syntax--documentation.syntax--scss > .syntax--punctuation.syntax--definition.syntax--comment,
	.syntax--comment.syntax--block.syntax--documentation.syntax--sass > .syntax--punctuation.syntax--definition.syntax--comment,
	.syntax--comment.syntax--block.syntax--documentation.syntax--cs   > .syntax--punctuation.syntax--definition.syntax--comment,
	.syntax--string.syntax--regexp.syntax--multiline.syntax--coffee   > .syntax--punctuation.syntax--definition.syntax--begin,
	.syntax--string.syntax--regexp.syntax--multiline.syntax--coffee   > .syntax--punctuation.syntax--definition.syntax--end,
	.syntax--string.syntax--regexp.syntax--multiline.syntax--sy       > .syntax--punctuation.syntax--definition.syntax--triple-slash{
		font-variant-ligatures: discretionary-ligatures;
	}

	// Haskell compound operators
	.syntax--haskell.syntax--keyword{
		font-variant-ligatures: discretionary-ligatures;
	}

	// APL
	.syntax--apl.syntax--spaced.syntax--keyword{
		font-feature-settings: "ss01";
	}

	// Disable ligatures
	.syntax--punctuation.syntax--section.syntax--array.syntax--shell,
	.syntax--string.syntax--regexp.syntax--sed,
	.syntax--string.syntax--double.syntax--quoted.syntax--coffee,
	.syntax--keyword.syntax--operator.syntax--assignment.syntax--compound.syntax--bitwise.syntax--js,
	.syntax--keyword.syntax--operator.syntax--assignment.syntax--compound.syntax--bitwise.syntax--ts,
	.syntax--keyword.syntax--operator.syntax--assignment.syntax--compound.syntax--bitwise.syntax--tsx{
		font-variant-ligatures: none;
	}
}

/* Disable ligatures temporarily */
body.disable-ligatures{
	--editor-font-family: Menlo;
	
	atom-text-editor,
	atom-text-editor *{
		font-variant-ligatures: none !important;
	}
}


/* Stop cursor from blinking. S/O to https://discuss.atom.io/t/blinking-cursor/1544/22 */
atom-text-editor.is-focused .cursors .cursor{
	opacity: 1;
}

/* Bracket-matcher highlights */
.bracket-matcher .region{
	background: lime;
	outline: 1px solid #0a0;
	
	/* Hide bracket-matching pairs unless requested */
	.scroll-view:not(.show-bracket-matcher) &{
		visibility: hidden;
	}
}

/* Hide spell-checker until requested */
.spell-check-misspelling .region{
	background: rgba(255, 0, 0, .25);
	outline: 1px solid red;
	border: none;
	
	.scroll-view:not(.show-spellcheck) &{
		display: none;
	}
}

/* Hide wrapping guide */
.wrap-guide{
	display: none !important;
}


/* Debugging highlights for language-grammar development */
atom-workspace:not(.theme-atom-github-syntax){
	--test1-bg: #f00;    --test1-fg: #fff; --test1-o: #800;
	--test2-bg: #0e0;    --test2-fg: #000; --test2-o: #080;
	--test3-bg: #6cf;    --test3-fg: #000; --test3-o: #00f;
	
	&.theme-seti-syntax{
		--test1-bg: #a00404; --test1-fg: #fff; --test1-o: #f00;
		--test2-bg: #077b07; --test2-fg: #fff; --test2-o: #0f0;
		--test3-bg: #0c449c; --test3-fg: #fff; --test3-o: #99f;
	}

	.syntax--test-0, .syntax--test0,
	.syntax--test-1, .syntax--test1,
	.syntax--test-2, .syntax--test2,
	.syntax--test-3, .syntax--test3{
		all:              unset           !important;
		outline:          1px solid       !important;
		&:empty{
			padding-left:    0.5ch        !important;
			border-color:    transparent  !important;
			background-clip: padding-box  !important;
		}
	}
	.syntax--test-1, .syntax--test1{
		color:            var(--test1-fg) !important;
		background-color: var(--test1-bg) !important;
		outline-color:    var(--test1-o)  !important;
	}
	.syntax--test-2, .syntax--test2{
		color:            var(--test2-fg) !important;
		background-color: var(--test2-bg) !important;
		outline-color:    var(--test2-o)  !important;
	}
	.syntax--test-3, .syntax--test3{
		color:            var(--test3-fg) !important;
		background-color: var(--test3-bg) !important;
		outline-color:    var(--test3-o)  !important;
	}
}


/* HACK: Remove once we do something about pointless icon overrides in File-Icons */
.perl-icon[data-name$=".t"]::before{
	font: 17px "File-Icons";
	content: "\ea65";
	top: 3px;
}

.icon[data-name$=".alg"]::before{
	font: 16px "File-Icons";
	content: "\2a74";
	top: 4px;
	
	body.file-icons-coloured & {
		color: #90a959;
	}
}

.icon[data-path*="/packages/injections/tests/"][data-name$=".rb"]::before{
	font: 17px "File-Icons";
	top: 3px;
	content: "\ea68";
}

.icon[data-path$="/packages/injections/misc/latin-1"]::before{
	font: 16px "Octicons Regular";
	top: unset;
	content: "\f011";
}

.icon[data-name="symbols.tsv"]::before{
	font: 14px "File-Icons";
	content: "\f015";
	top: 2px;
}

.icon[data-path$="npmrc"]::before{
	font: 17px "File-Icons";
	content: "\e91c";
	top: 3px;

	body:not(.file-icons-colourless) & {
		color: #ac4142;
	}
}

.js-icon[data-name$="-spec.jsx"]::before{
	font: 17px "File-Icons";
	content: "\ea67";
	top: 3px;
}

/* HACK: Force checklist icon for TODO files, which use MD highlighting */
.icon[data-name="TODO"]::before{
	font: 17px "Octicons Regular";
	content: "\f076";
	left: 1px;
	top:  1px;
	
	body:not(.file-icons-colourless) & {
		color: #90a959;
	}
}


atom-notification{
	.fd.detail{
		@gutter: 30px;
		margin-left: -@gutter;
		padding-left: @gutter;
		
		// File descriptor indicators
		&::before{
			content: attr(data-fd)">";
			position: absolute;
			left: 0;
			width: @gutter;
			height: 36px;
			text-align: center;
			font: 1.5em/1 Menlig, Menloco, monospace;
			color: rgba(255, 255, 255, .75);
			display: block;
			margin-top: -11px;
			box-sizing: border-box;
			padding: 9px 0 0;
		}
		&[data-fd="1"]::before{
			border-top: 0;
			margin-top: -10px;
			height: 35px;
		}
		
		.detail-content{
			tab-size: 4;
			margin-left: 1em;
		}
	}
	
	.tty-output b{
		font-family: Menlo;
	}
	
	/* Disable transitions when dismissing popups */
	&.remove{
		-webkit-animation-duration: 0ms !important;
	}
	
	/* Scope-logging polishes */
	&.info.has-close > .content > .message > ul{
		padding-left: 1.2em;
		margin-right: -25px;
		cursor: text;
		
		& > li{
			user-select: all;
		}
	}
}

/* Hide EditorConfig's status-bar tile */
#aec-status-bar-container{
	display: none !important;
}


/* Docks: Hide toggle-buttons */
body:not(.show-toggle-buttons) .atom-dock-toggle-button{
	display: none !important;
}


/* Seti Syntax: Tweak some colour choices */
.theme-seti-syntax atom-text-editor{
	.syntax--markup.syntax--heading{
		& .syntax--punctuation.syntax--definition.syntax--heading{
			color: #2d3e3a;
		}
	}
	
	.syntax--punctuation.syntax--definition.syntax--array{
		color: #4d5a5e;
	}
	
	&[data-grammar$="source js"]{
		.syntax--meta.syntax--brace.syntax--js,
		.syntax--meta.syntax--delimiter.syntax--period.syntax--js{
			color: #4d5a5e;
		}
	}
	
	&[data-grammar$="source ruby"]{
		.syntax--string.syntax--unquoted.syntax--heredoc.syntax--ruby{
			color: #9ac4d7;
		}
	}
	
	&[data-grammar="text restructuredtext"]{
		.syntax--markup.syntax--raw.syntax--restructuredtext{
			&, > .syntax--punctuation.syntax--definition.syntax--raw{
				border-left:  none;
				border-right: none;
			}
		}
	}
	
	.syntax--source.syntax--yacc{
		color: inherit;
		
		.syntax--variable.syntax--language{
			& .syntax--punctuation.syntax--definition.syntax--variable{
				color: #4d5a5e;
			}
		}
	}
	
	&[mini]{
		&[data-grammar$="regexp"],
		&[data-grammar$="regexp replacement"]{
			.highlights .highlight.selection .region{
				background: rgba(81, 154, 186, 0.2) !important;
			}
		}
		
		&[data-grammar$="null-grammar"]{
			.highlights .highlight.selection .region{
				background: rgba(154, 154, 154, 0.35) !important;
			}
		}
		
		.cursor{
			border-left-width: 1px;
		}
	}
	
	.syntax--constant.syntax--other.syntax--reference.syntax--link,
	.syntax--string.syntax--other.syntax--link,
	.syntax--underline{
		&:not(.syntax--gitconfig){
			text-decoration: underline;
		}
	}
}


/* Seti UI: Polish broken and/or questionable styling choices */
.theme-seti-ui{
	.tree-view .project-root{
		.header .icon-repo::before  { margin-right: 0 }
		&.status-added    > .header { color: #8dc149; }
		&.status-ignored  > .header { color: #41535b; }
		&.status-modified > .header { color: #cbcb41; }
	}
	
	.results-view .list-group,
	.results-view .list-tree{
		.selected::before{ opacity: 0.2; }
	}
	
	/* Keep search fields looking consistent with other text-editors */
	.find-and-replace atom-text-editor[mini],
	.project-find     atom-text-editor[mini]{
		font-family: var(--editor-font-family);
		font-size:   var(--editor-font-size);
		letter-spacing: 0;
	}
	
	/* Restore icons that still get clobbered even when Seti's icons are disabled */
	.icon-info::before     { content: "\f059"; font: 16px "Octicons Regular"; }
	.icon-lock::before     { content: "\f06a"; font: 16px "Octicons Regular"; }
	.icon-markdown::before { content: "\f0c9"; font: 16px "Octicons Regular"; }
	.icon-ruby::before     { content: "\f047"; font: 16px "Octicons Regular"; }
	.icon-search::before   { content: "\f02e"; font: 16px "Octicons Regular"; }
	.icon-settings::before { content: "\f07c"; font: 16px "Octicons Regular"; }
}


/* GitHub Syntax */
.theme-github-atom-light-syntax{
	
	/* Show highlighted brackets on current line */
	.cursor-line{
		background: none !important;
	}
	
	/* Prepend ^M to scoped carriage-returns */
	.syntax--carriage-return::before{
		content: "^M";
	}
}


/* Various UI polishes */
.theme-atom-light-ui{
	
	.deprecation-message > ul > li > code{
		word-wrap: break-word;
		max-width: 100%;
		display: block;
		white-space: pre-line;
		line-height: 1.7;
	}

	/* Panels */
	atom-panel-container:first-child{
		box-shadow: 1px 0 0 #9f9f9f;
		z-index: 2;
	}

	atom-text-editor .gutter .line-number{
		&.git-line-added,
		&.git-line-modified,
		&.git-line-removed{
			border-left-width: 3px;
		}
	}
	
	/* Sharpen contrast of highlighted search-results */
	.results-view, .preview-pane{
		.highlight-info{
			color: #fff;
			border-radius: 0;
			background-color: rgba(0, 0, 127, 1);
			background-clip: padding-box;
			padding: 1px 2px;
			border: 0 solid transparent;
			border-width: 0 1px;
		}
	}
}


/* Adjust spacing between status-bar elements */
status-bar{
	.cursor-position   { margin-right: -7px; }
	.cursor-offset     { margin-right:  7px; }
	.cursor-offset > a { margin-right:  0;   }
}


/* Fade briefly when clicked. See: src/index.js */
status-bar-file{
	transition: .15s ease-in-out opacity;
}


/* Fix margins of status-bar icons */
status-bar-git .commits-ahead-label:before{
	margin-right: 2px;
}


/* Undo distractions added by atom/atom#18738 */
body:not(.shitting-trees) .grammar-selector .pull-right > .badge{
	all: unset;
	opacity: .4;
	
	&:first-child:nth-last-child(2){
		display: none;
	}
}

/* Compensate for missing padding when hiding gutter */
.gutter-container[hidden]{
	display: block !important;
	padding-left: 1em;
	
	> *{
		display: none !important;
	}
}

/* STT tooltips */
.cursor[data-char]::before{
	content: attr(data-char);
	position: absolute;
	text-align: center;
	z-index: 5;
	bottom: 100%;
	background: #fff;
	box-shadow: 0 0 1px #000;
	white-space: nowrap;
	padding: 1px 4px;
	margin-bottom: -4px;
	transform: translate(-50%, -50%);
}
