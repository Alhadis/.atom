# Improve support for non-standard (and now Mozilla-specific) “@document” blocks
# See: https://developer.mozilla.org/en-US/docs/Web/CSS/@document
scopeName: "fuck-atom.10"
injectionSelector: "L:source.css - (comment | meta.at-rule & (document | media.header) | meta.pseudo-state.vendored)"
patterns: [{
	# “@document” and “@-moz-document” at-rules
	name:  "meta.at-rule.document.header.css"
	begin: "(?i)\\s*(?=@(?:-moz-)?document(?:[\\s'\"{;]|/\\*|$))"
	end:   "(?<=})(?!\\G)"
	patterns: [{
		begin: "(?i)\\G(@)(?:-moz-)?document"
		end:   "(?=\\s*[{;])"
		beginCaptures:
			0: name: "keyword.control.at-rule.document.css"
			1: name: "punctuation.definition.keyword.css"
		patterns: [
			{include: "#function"}
			{include: "#regexp"}
			{include: "source.css#commas"}
			{include: "source.css#comment-block"}
			{include: "source.css#escapes"}
		]
	},{
		name: "meta.at-rule.document.body.css"
		begin: "{"
		end:   "}"
		beginCaptures: 0: name: "punctuation.section.document.begin.bracket.curly.css"
		endCaptures:   0: name: "punctuation.section.document.end.bracket.curly.css"
		patterns: [include: "source.css"]
	}]
},{
	# Vendor-prefixed, function-like :pseudo-class(…) or ::pseudo-element(…)
	name: "meta.pseudo-state.vendored.${1:/downcase}.css"
	applyEndPatternLast: yes
	begin: """(?xi)(?=
		::? -?
		(
			# Vendor prefix
			(?:
				# Leading dash attached
				(?<=-) (?:ah|apple|atsc|epub|hp|khtml|moz|ms|o|rim|ro|tc|wap|webkit|xv)
				|
				# No leading dash (rare)
				(?<!-) (?:mso|prince)
			)
			-[a-zA-Z0-9](?:-[a-zA-Z0-9]|[a-zA-Z0-9]+)*+
		)
		\\\x28
	)"""
	end: "(?!\\G)"
	patterns: [{
		begin: "\\G((::?)[-a-zA-Z0-9]+)(\\()"
		end:   "\\)"
		beginCaptures:
			1: name: "entity.other.attribute-name.pseudo-class.css"
			2: name: "punctuation.definition.entity.css"
			3: name: "punctuation.section.function.begin.bracket.round.css"
		endCaptures:
			0: name: "punctuation.section.function.end.bracket.round.css"
		patterns: [include: "source.css#property-values"]
	}]
},{
	# Function-like :pseudo-classes(…) and ::pseudo-elements(…)
	name:  "meta.pseudo-state.${3:/downcase}.css"
	begin: """(?xi)(?=
		::?
		(
			# Pseudo-elements
			(?<=::) (?:cue|highlight|part|slotted|view-transition-(?:group|image-pair|new|old))
			|
			# Pseudo-classes
			(?<!::) (?:host-context|host|is|state|where)
		)
		\\\x28
	)"""
	end: "(?!\\G)"
	patterns: [{
		begin: "(?i)\\G(?:((::)[-a-z]+)|((:)[-a-z]+))(\\()"
		end:   "\\)"
		beginCaptures:
			1: name: "entity.other.attribute-name.pseudo-element.css"
			3: name: "entity.other.attribute-name.pseudo-class.css"
			2: name: "punctuation.definition.entity.css"
			4: name: "punctuation.definition.entity.css"
			5: name: "punctuation.section.function.begin.bracket.round.css"
		endCaptures:
			0: name: "punctuation.section.function.end.bracket.round.css"
		patterns: [include: "source.css#selector-innards"]
	}]
}]

repository:
	# Match functions that accept unquoted strings
	function:
		name:  "meta.function.document-rule.match-${1:/downcase}.css"
		begin: "(?i)(?<![\\w-])(url|url-prefix|domain|media-document)(\\()"
		end:   "\\)"
		beginCaptures:
			1: name: "support.function.document-rule.css"
			2: name: "punctuation.section.function.begin.bracket.round.css"
		endCaptures:
			0: name: "punctuation.section.function.end.bracket.round.css"
		patterns: [
			{"include": "source.css#string"}
			{"include": "source.css#comment-block"}
			{"include": "source.css#escapes"}
			
			# Unquoted string
			name: "variable.parameter.document-rule.css"
			match: "[^'\")\\s]+"
		]

	# Match functions that mandate quoted arguments (i.e., just the `regexp(…)` rule)
	regexp:
		applyEndPatternLast: yes
		name:  "meta.function.document-rule.match-regexp.css"
		begin: "(?i)(?<![\\w-])(regexp)(\\()"
		end:   "\\)"
		beginCaptures:
			1: name: "support.function.document-rule.css"
			2: name: "punctuation.section.function.begin.bracket.round.css"
		endCaptures:
			0: name: "punctuation.section.function.end.bracket.round.css"
		patterns: [{
			# Multiline parenthetical: “@-moz-document regexp(”
			begin: "\\G(?=\\s*$)"
			end:   "(?=\\s*\\S)"
		},{
			# Parameters
			begin: "\\G(?=\\s*\\S)|(?!\\G|\\))"
			end:   "(?=\\))"
			patterns: [
				{include: "source.css#comment-block"}
				{include: "#regexpQuoted"}
				
				# Highlight unquoted characters as errors
				name: "invalid.illegal.syntax.unquoted-string.css"
				match: "[^'\")\\s]+"
			]
		}]

	# Quoted string value containing a regexp to match
	regexpQuoted:
		patterns: [
			{include: "#regexpQuotedDouble"}
			{include: "#regexpQuotedSingle"}
		]

	# Double-quoted regex string
	regexpQuotedDouble:
		name:  "string.regexp.quoted.double.css"
		begin: '"'
		end:   '"'
		beginCaptures: 0: name: "punctuation.definition.string.begin.css"
		endCaptures:   0: name: "punctuation.definition.string.end.css"
		contentName: "source.embedded.regexp"
		patterns: [include: "source.regexp"]

	# Single-quoted regex string
	regexpQuotedSingle:
		name:  "string.regexp.quoted.single.css"
		begin: "'"
		end:   "'"
		beginCaptures: 0: name: "punctuation.definition.string.begin.css"
		endCaptures:   0: name: "punctuation.definition.string.end.css"
		contentName: "source.embedded.regexp"
		patterns: [include: "source.regexp"]
