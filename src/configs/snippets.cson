# Universal
"*":
	"Node Script":
		prefix: "node"
		body: '#!/usr/bin/env node --es_staging\n"use strict";\n\n'

	Perl:
		prefix: "pl"
		body: "#!/usr/bin/env perl\nuse strict;\nuse warnings;\nuse autodie;\n\n$1"

	Ruby:
		prefix: "rb"
		body: "#!/usr/bin/env ruby\n\n$1"

	"Boilerplate HTML":
		prefix: "htmldoc"
		body: '<!DOCTYPE html>\n<html lang="en-AU">\n<head>\n<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />\n<meta http-equiv="X-UA-Compatible" content="IE=edge" />\n<meta name="viewport" content="initial-scale=1, minimum-scale=1" />\n<title>$1</title>\n\n<style>\n/** Reset */\nhtml{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}article,aside,details,figcaption,figure,footer,header,main,menu,nav,section,summary{display:block}audio,canvas,progress,video{display:inline-block;vertical-align:baseline}audio:not([controls]){display:none;height:0}[hidden],template{display:none!important}a{background-color:transparent}a:active,a:hover{outline-width:0}abbr[title]{border-bottom:0;text-decoration:none}b,strong{font-weight:inherit}b,strong{font-weight:bolder}dfn{font-style:italic}h1{font-size:2em;margin:.67em 0}mark{background-color:#ff0;color:#000}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sup{top:-.5em}sub{bottom:-.25em}img{border-style:none}svg:not(:root){overflow:hidden}figure{margin:1em 2.5em}hr{box-sizing:content-box;height:0;overflow:visible}pre{overflow:auto}code,kbd,pre,samp{font-family:monospace,monospace;font-size:1em}button,input,optgroup,select,textarea{font:inherit;margin:0}button{overflow:visible}button,select{text-transform:none}button,html input[type=button],input[type=reset],input[type=submit]{-webkit-appearance:button;cursor:pointer}button[disabled],html input[disabled]{cursor:default}button::-moz-focus-inner,input::-moz-focus-inner{border:0;padding:0}button:-moz-focusring,input:-moz-focusring{outline:1px dotted ButtonText}input[type=checkbox],input[type=radio]{box-sizing:border-box;padding:0}input[type=number]::-webkit-inner-spin-button,input[type=number]::-webkit-outer-spin-button{height:auto}input[type=search]{-webkit-appearance:textfield}input[type=search]::-webkit-search-cancel-button,input[type=search]::-webkit-search-decoration{-webkit-appearance:none}fieldset{border:1px solid silver;margin:0 2px;padding:.35em .625em .75em}legend{color:inherit;padding:0}textarea{overflow:auto}optgroup{font-weight:700}\n\n*{\n\ttab-size: 4;\n\tbox-sizing: border-box;\n}\n\t:focus{outline: none}\n</style>\n</head>\n\n\n<body>\n\t\n\t$2\n\t\n</body>\n</html>'

	"10 Digits":
		prefix: "10"
		body: "0123456789"
	
	"100 Digits":
		prefix: "100"
		body: "0000000000111111111122222222223333333333444444444455555555556666666666777777777788888888889999999999"

	Alphabet:
		prefix: "alphabet"
		body: "${1:ABCDEFGHIJKLMNOPQRSTUVWXYZ} ${2:0123456789}"

	θ:
		prefix: "theta"
		body: "θ"

	λ:
		prefix: "l\\"
		body: "λ"


# Makefile
".source.makefile":
	"Windows check":
		prefix: "iswin"
		body: """
			# Windows: CMD.exe
			ifdef SystemRoot
				IS_WINDOWS = 1
			endif
			
			# Windows: MinGW / COMMAND.COM
			ifdef SYSTEMROOT
				IS_WINDOWS = 1
			endif
			"""

	Watchman:
		prefix: "watch"
		body: """
			watch:;   @watchman -- trigger . _ '${1:fixtures/*}' -- make all >/dev/null
			unwatch:; @watchman -- watch-del . >/dev/null
			"""


# Cascading Style Sheets
".source.css":
	Placeholder:
		prefix: "placeholder"
		body: """
			::-webkit-input-placeholder{    $1}
			::-ms-input-placeholder{        $1}
			:-ms-input-placeholder{         $1}
			::-moz-placeholder{opacity: 1;  $1}
			:-moz-placeholder{              $1}
			::placeholder{                  $1}
			:placeholder-shown{             $1}
			"""

	Comment:
		prefix: "/"
		body: "/** $1 */"
	
	Font:
		prefix: "font"
		body: """
			@font-face {
				font-family: ${1:FontName};
				font-weight: normal;
				font-style: normal;
				src: url("${2:fonts/font-name}.eot");
				src: url("${2:fonts/font-name}.eot#iefix") format("embedded-opentype"),
					url("${2:fonts/font-name}.woff2") format("woff2"),
					url("${2:fonts/font-name}.ttf") format("truetype"),
					url("${2:fonts/font-name}.woff") format("woff"),
					url("${2:fonts/font-name}.svg#FontName") format("svg");
			}$3"""

# JavaScript
".source.js":
	"Anonymous Arrow Function":
		prefix: "a"
		body: "() => $1"
	Comment:
		prefix: "/"
		body: "// $1"
	DocBlock:
		prefix: "/*"
		body: "/**\n * $1\n */"
	
	# Logging
	"Console - Dir":
		prefix: "dir"
		body: "console.dir($1);$0"
	"Console - Error":
		prefix: "err"
		body: "console.error($1);$0"
	"Console - Info":
		prefix: "info"
		body: "console.info($1);$0"
	"Console - Log":
		prefix: "log"
		body: "console.log($1);$0"
	"Console - Trace":
		prefix: "trace"
		body: "console.trace($1);$0"
	
	# Specs
	Spec:
		prefix: "it"
		body: 'it("$1", () => {\n\t$2\n});'
	"Spec Description":
		prefix: "ds"
		body: 'describe("$1", () => {\n\t$2\n});'
	When:
		prefix: "when"
		body: """
			when("$1", () =>
				it("$2", () => {
					$3
				}));
		"""
	"When - Braced closure":
		prefix: "When"
		body: """
			when("$1", () => {
				it("$2", () => {
					$3
				});
			});
		"""
	Before:
		prefix: "before"
		body: "before(() => {\n\t$1\n});"
	BeforeEach:
		prefix: "each"
		body: "beforeEach(() => {\n\t$1\n$1});"
	After:
		prefix: "after"
		body: "after(() => {\n\t$1\n});"
	AfterEach:
		prefix: "afterEach"
		body: "afterEach(() => {\n\t$1\n});"

	# Other crap
	Strict:
		prefix: "js"
		body: '"use strict";\n\n$1'
	Require:
		prefix: "req"
		body: 'const ${1:module} = require("${1:module}");'
	For:
		prefix: "for"
		body: "for(let i = 0, l = ${1:array}.length; i < l; ++i){\n\tlet ${2:item} = ${1:array}[i];\n\t$3\n}"
	New:
		prefix: "new"
		body: "nеw"
	"Read Stdin":
		prefix: "stdin"
		body: """
			new Promise(resolve => {
				let input = "";
				process.stdin.setEncoding("UTF8");
				process.stdin.on("readable", () => {
					const chunk = process.stdin.read();
					null !== chunk ? input += chunk : resolve(input);
				})
			}).then(data => {
				$1
			});
		"""
	Editor:
		prefix: "ed"
		body: "const editor = atom.workspace.getActiveTextEditor();\n"
	Print:
		prefix: "print"
		body: "print.out($1);$2"
	"Promise - Monadic executor":
		prefix: "prom"
		body: "return new Promise(resolve => {\n\t$1\n});"
	"Promise - Dyadic executor":
		prefix: "Prom"
		body: "return new Promise((resolve, reject) => {\n\t$1\n});"
	
	# Module shortcuts for the impatient programmer
	"Module - Filesystem":
		prefix: "fs"
		body: 'const fs = require("fs");$1'
	"Module - Path":
		prefix: "Path"
		body: 'const path = require("path");\n$1'
	"Module - Child Process":
		prefix: "child"
		body: 'const childProcess = require("child_process");$1'
	"Module - Print":
		prefix: "Print"
		body: 'const print = require("print");$1'
	"path.join":
		prefix: "join"
		body: 'const {join$1} = require("path");\n$2'

".source.js .punctuation.definition.arguments.end.bracket.round.js":
	"Console - Log":
		prefix: "log"
		body: "console.log(\"$1\")$0"


# CSON
".source.coffee":
	"Patterns (Single-line)":
		prefix: "pat"
		body: "patterns: [$1]"
	"Patterns (Multiline)":
		prefix: "Pat"
		body: "patterns: [{\n\t$1\n}]"
	Include:
		prefix: "inc"
		body: "include: \"#$1\""
	"Extended Expression":
		prefix: "xe"
		body: '"""(?x)\n\t$1\n"""'


# Perl
".source.perl":
	Invocant:
		prefix: "me"
		body: "my \$self = shift;\n"
	Dumper:
		prefix: "dumper"
		body: "use Data::Dumper;"
	Dump:
		prefix: "dump"
		body: "print Dumper(${1:$data});"
	"Say: Import":
		prefix: "say"
		body: 'use feature "say";'
	"Getopt: Import":
		prefix: "opt"
		body: "use Getopt::Long qw(:config auto_abbrev);"
	"Getopt: Usage":
		prefix: "getopt"
		body: 'GetOptions(${1:"number=i" => $number, "string=s" => $string, "boolean"  => $bool});'


# Roff
".text.roff":
	＝:
		prefix: "="
		body: '.\\\\" ============================================================================\n'


# Ruby
".source.ruby":
	Executable:
		prefix: "rb"
		body: "#!/usr/bin/env ruby\n\n$1"
	Read:
		prefix: "read"
		body: 'data = File.read("${1:file.name}")'


# ASCII mnemonics for Unicode symbols
".text.plain, .string.quoted, .source.gfm, .comment":
	€:
		prefix: "C="
		body: "€"
	″:
		prefix: ",,"
		body: "″"
	™:
		prefix: "TM"
		body: "™"
	©:
		prefix: "(C)"
		body: "©"
	©2:
		prefix: "(c)"
		body: "©"
	®:
		prefix: "(R)"
		body: "®"
	®2:
		prefix: "(r)"
		body: "®"
	×:
		prefix: "x"
		body: "× "
	→:
		prefix: "->"
		body: "→"
	←:
		prefix: "<-"
		body: "←"
	⇒:
		prefix: "=>"
		body: "⇒"
	⇐:
		prefix: "<="
		body: "⇐"
	↑:
		prefix: "^|"
		body: "↑"
	↓:
		prefix: "v|"
		body: "↓"
	│:
		prefix: "|"
		body: "│"


# Shell-scripts
".source.shell":
	Getopts:
		prefix: "opt"
		body: "while getopts ${1:o:pt} ${2:option}; do\n\tcase $${2:option} in\n\t\t${3:o) name=$OPTARG;;}\n\tesac\ndone\nshift $((OPTIND - 1))"
	For…in:
		prefix: "for"
		body: """
			${1:ITEMS}=(${2:alpha beta});
			for ${3:i} in "\${${1:ITEMS}[@]}"; do
				echo "\$${3:i}";$4
			done;
		"""
	"File Loop":
		prefix: "eachfile"
		body: "for i in $@; do $1; done;"
	Case:
		prefix: "case"
		body: """
			case $name in
				value) name=$OPTARG ;;
			esac
		"""


# HTML
".text.html.basic":
	Script:
		prefix: "script"
		body: '<script>\n\t"use strict";\n\t$0\n</script>'
